///
/// @Generated by Mockolo
///



import Foundation


final class AppProtocolAMock: AppProtocolA {
    init() { }
    init(num: Int = 0) {
        self.num = num
    }


    private(set) var numSetCallCount = 0
    var num: Int = 0 { didSet { numSetCallCount += 1 } }

    private(set) var doSomethingCallCount = 0
    var doSomethingHandler: (() -> ())?
    func doSomething()  {
        doSomethingCallCount += 1
        if let doSomethingHandler = doSomethingHandler {
            doSomethingHandler()
        }
        
    }
}

final class AppProtocolBMock: AppProtocolB {
    init() { }
    init(float: Float = 0.0) {
        self.float = float
    }


    private(set) var floatSetCallCount = 0
    var float: Float = 0.0 { didSet { floatSetCallCount += 1 } }

    private(set) var isDoSomethingCallCount = 0
    var isDoSomethingHandler: (() -> (Bool))?
    func isDoSomething() -> Bool {
        isDoSomethingCallCount += 1
        if let isDoSomethingHandler = isDoSomethingHandler {
            return isDoSomethingHandler()
        }
        return false
    }
}

final class AppProtocolCMock: AppProtocolC {
    init() { }
    init(name: Int = 0) {
        self.name = name
    }


    private(set) var nameSetCallCount = 0
    var name: Int = 0 { didSet { nameSetCallCount += 1 } }

    private(set) var isMyNameCallCount = 0
    var isMyNameHandler: ((String) -> (Bool))?
    func isMyName(name: String) -> Bool {
        isMyNameCallCount += 1
        if let isMyNameHandler = isMyNameHandler {
            return isMyNameHandler(name)
        }
        return false
    }
}

